#!/bin/bash -e
# bin/compile <build-dir> <cache-dir>

# Exit if any subcommand fails
set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
CURRENT_DIR=$PWD

TRANSCRYPT_ENV_FILE="$ENV_DIR/TRANSCRYPT_CMD"

if [ ! -f $TRANSCRYPT_ENV_FILE ]; then
    printf "\n-----> ERROR: Please set TRANSCRYPT_CMD. You can get the command by running in your project directory: transcrypt --display \n\n"
    exit 1
fi

TRANSCRYPT_CMD=$(cat $TRANSCRYPT_ENV_FILE)

printf "\n-----> Successfully retrieved TRANSCRYPT_CMD from ENV var"

mkdir -p $CACHE_DIR
cd $CACHE_DIR
if [ -d "transcrypt" ]; then
    cd transcrypt
    git fetch --quiet
    git pull --quiet
else
    git clone --quiet https://github.com/elasticdog/transcrypt.git
fi

cd $BUILD_DIR
ls

# It doesn't have git, so initialize
printf "\n-----> Setting up git repo for transcrypt\n\n"
git init . --quiet
git config --global user.email "foo@bar.com"
git config --global user.name "Foo Bar"
git add -A
git commit -m "Init"
printf "\n-----> Status \n\n"
git status

# Install transcrypt, its helper utils, and password/cipher
printf "\n-----> Installing and configuring transcrypt\n\n"
$CACHE_DIR/transcrypt/$TRANSCRYPT_CMD

git stash save
rm .git/index
git checkout HEAD -- "$(git rev-parse --show-toplevel)"
git stash pop

printf "\n-----> ls-crypt\n\n"
git ls-crypt

printf "\n-----> Did it encrypt?\n\n"
cat config/slack.enc.cr

printf "\n-----> All transcrypted files decrypted!\n\n"
